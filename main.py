# ‚úÖ RUSGO ‚Äî Telegram-–±–æ—Ç —Å GPT –Ω–∞ Python (aiogram)
# –û–ø–∏—Å–∞–Ω–∏–µ: RUSGO ‚Äî —ç—Ç–æ –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∂–∏–∑–Ω—å—é –≤ –†–æ—Å—Å–∏–∏.
# –û–Ω –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –≥–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–∞–∫ –Ω–∞–π—Ç–∏ –∂–∏–ª—å—ë, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å–æ —Å–ø—Ä–∞–≤–∫–∞–º–∏, —Å–∏–º–∫–∞–º–∏ –∏ –∫–∞—Ä—Ç–∞–º–∏.
# –í—Å—ë –ø—Ä–æ—Å—Ç–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏ –∏ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º. –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º, —É–∑–±–µ–∫—Å–∫–æ–º –∏ —Ç–∞–¥–∂–∏–∫—Å–∫–æ–º —è–∑—ã–∫–∞—Ö.
# –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, —É–∑–Ω–∞—Ç—å –∫–∞–∫ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –∏ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è –≤ –Ω–æ–≤–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ.
# –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ, –±–µ–∑ –∑–∞–Ω—É–¥—Å—Ç–≤–∞, –∏ –≤—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –æ–±—ä—è—Å–Ω–∏—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ –∫–∞–∂–¥–æ–º—É.

from aiogram import Bot, Dispatcher, executor, types
import asyncio
import logging
from openai import OpenAI
import random
import langdetect
from deep_translator import GoogleTranslator
import aiohttp

# === –¢–í–û–ò –î–ê–ù–ù–´–ï ===


client = OpenAI(api_key=OPENAI_API_KEY)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

user_languages = {}
user_sessions = {}  # user_id: {"messages": [...], "last_active": datetime}

# === –ü–†–ò–í–ï–¢–°–¢–í–ò–ï –ò –í–´–ë–û–† –Ø–ó–´–ö–ê ===
@dp.message_handler(commands=["start"])
async def send_language_choice(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üáø O'zbekcha", "üáπüáØ –¢–æ“∑–∏–∫”£")
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî RUSGO. –ü–æ–º–æ–≥–∞—é —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –ø–æ –∂–∏–∑–Ω–∏ –≤ –†–æ—Å—Å–∏–∏.\n\n–í—ã–±–µ—Ä–∏ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –æ–±—â–∞—Ç—å—Å—è:", reply_markup=keyboard)

# === –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –Ø–ó–´–ö–ê ===
@dp.message_handler(lambda message: message.text in ["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üáø O'zbekcha", "üáπüáØ –¢–æ“∑–∏–∫”£"])
async def set_language(message: types.Message):
    lang_map = {
        "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "ru",
        "üá∫üáø O'zbekcha": "uz",
        "üáπüáØ –¢–æ“∑–∏–∫”£": "tg"
    }
    user_languages[message.from_user.id] = lang_map[message.text]

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üìÑ –•–æ—á—É —Å–¥–µ–ª–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚Äî –∫–∞–∫?", "üìë –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–∞—Ç–µ–Ω—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É?")
    keyboard.row("üè† –ì–¥–µ –Ω–∞–π—Ç–∏ –∂–∏–ª—å—ë –∏–ª–∏ –ø—Ä–æ–ø–∏—Å–∫—É?", "üöë –ì–¥–µ –ø—Ä–æ–π—Ç–∏ –º–µ–¥–æ—Å–º–æ—Ç—Ä –±—ã—Å—Ç—Ä–æ?")
    keyboard.row("üì± –ì–¥–µ –∫—É–ø–∏—Ç—å —Å–∏–º–∫—É –±–µ–∑ –ø—Ä–æ–±–ª–µ–º?", "üí≥ –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –≤ –±–∞–Ω–∫–µ?")
    keyboard.row("üîç –ù–∞–π—Ç–∏ —Ä—è–¥–æ–º")
    keyboard.row("‚úçÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å")

    await message.answer("‚úÖ –Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Ç–µ–º—É –∏–ª–∏ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=keyboard)

# === GPT-–æ—Ç–≤–µ—Ç ===
@dp.message_handler()
async def gpt_reply(message: types.Message):
    try:
        from datetime import datetime, timedelta

        user_text = message.text
        from_user = message.from_user.id
        now = datetime.now()

        session = user_sessions.get(from_user)
        if not session or now - session.get("last_active", now) > timedelta(minutes=30):
            session = {
                "messages": [{
                    "role": "system",
                    "content": "–¢—ã Telegram-–±–æ—Ç RUSGO. –ü–æ–º–æ–≥–∞–µ—à—å –ª—é–¥—è–º, –æ–∫–∞–∑–∞–≤—à–∏–º—Å—è –≤ –†–æ—Å—Å–∏–∏, —Ä–µ—à–∞—Ç—å –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –∫–∞–∫ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è, –≥–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–∞—Ç–µ–Ω—Ç, —Å–¥–µ–ª–∞—Ç—å –º–µ–¥—Å–ø—Ä–∞–≤–∫—É, –Ω–∞–π—Ç–∏ –∂–∏–ª—å—ë –∏ —Ç.–¥. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç ‚Äò–ø–∞—Ç–µ–Ω—Ç‚Äô, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–π, —á—Ç–æ —Ä–µ—á—å –∏–¥—ë—Ç –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É. –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ö–µ–º—ã. –ù–µ –º–æ—Ä–∞–ª–∏–∑–∏—Ä—É–π."
                }]
            }

        session["messages"].append({"role": "user", "content": user_text})
        session["last_active"] = now
        user_sessions[from_user] = session

        if any(word in user_text.lower() for word in ["—Ö–æ—á—É –∫–∞—Ñ–µ", "–≥–¥–µ –ø–æ–µ—Å—Ç—å", "–≥–¥–µ –∫–∞—Ñ–µ", "–∫–∞—Ñ–µ —Ä—è–¥–æ–º"]):
            query = "–∫–∞—Ñ–µ –ü—É—à–∫–∏–Ω–æ"
            url = f"https://search-maps.yandex.ru/v1/?text={query}&type=biz&lang=ru_RU&apikey={YANDEX_API_KEY}"

            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    data = await resp.json()

            features = data.get("features", [])[:3]
            if not features:
                await message.answer("üòî –ù–µ –Ω–∞—à—ë–ª –∫–∞—Ñ–µ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
                return

            response_text = "‚òï –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ñ–µ —Ä—è–¥–æ–º:\n\n"
            for place in features:
                name = place["properties"]["CompanyMetaData"]["name"]
                address = place["properties"]["CompanyMetaData"].get("address", "–ê–¥—Ä–µ—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
                phone = place["properties"]["CompanyMetaData"].get("Phones", [{}])[0].get("formatted", "")
                response_text += f"üìç {name}\nüì¨ {address}\nüìû {phone}\n\n"

            await message.answer(response_text)
            return

        lang_code = user_languages.get(message.from_user.id, "ru")

        if lang_code != "ru":
            user_text = GoogleTranslator(source='auto', target='ru').translate(user_text)

        response = client.chat.completions.create(
            model="gpt-3.5-turbo-0125",
            messages=session["messages"]
        )
        reply = response.choices[0].message.content
        session["messages"].append({"role": "assistant", "content": reply})

        suffixes = [
            "",
            "\n\n–ï—Å–ª–∏ —á—Ç–æ ‚Äî –Ω–∞–ø–∏—à–∏, –±—Ä–∞—Ç, —è –ø–æ–¥—Å–∫–∞–∂—É –µ—â—ë.",
            "\n\n–ï—Å–ª–∏ –Ω–µ –ø–æ–Ω—è–ª ‚Äî —Å–∫–∞–∂–∏ –ø—Ä–æ—â–µ, —è –æ–±—ä—è—Å–Ω—é –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏.",
            "\n\n–ù–∞–¥–æ –±—É–¥–µ—Ç ‚Äî —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –∫–∞–∫ –Ω–∞–¥–æ, –±—Ä–∞—Ç."
        ]
        reply += random.choice(suffixes)

        if lang_code != "ru":
            reply = GoogleTranslator(source='ru', target=lang_code).translate(reply)

        await message.answer(reply)
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        print(e)

# === –Ø–ù–î–ï–ö–° –ü–û–ò–°–ö ===
@dp.message_handler(commands=["–Ω–∞–π—Ç–∏"])
async def find_places(message: types.Message):
    try:
        query = message.get_args()
        if not query:
            await message.answer("‚ùó –£–∫–∞–∂–∏, —á—Ç–æ –∏—Å–∫–∞—Ç—å. –ü—Ä–∏–º–µ—Ä: /–Ω–∞–π—Ç–∏ –º–µ–¥–æ—Å–º–æ—Ç—Ä –ú–æ—Å–∫–≤–∞")
            return

        url = f"https://search-maps.yandex.ru/v1/?text={query}&type=biz&lang=ru_RU&apikey={YANDEX_API_KEY}"

        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()

        features = data.get("features", [])[:3]
        if not features:
            await message.answer("üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
            return

        response_text = "üîç –ù–∞—à—ë–ª –≤–æ—Ç —á—Ç–æ:\n\n"
        for place in features:
            name = place["properties"]["CompanyMetaData"]["name"]
            address = place["properties"]["CompanyMetaData"].get("address", "–ê–¥—Ä–µ—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
            phone = place["properties"]["CompanyMetaData"].get("Phones", [{}])[0].get("formatted", "")
            response_text += f"üìç {name}\nüì¨ {address}\nüìû {phone}\n\n"

        await message.answer(response_text)

    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        print(e)

@dp.message_handler(lambda message: message.text == "üîç –ù–∞–π—Ç–∏ —Ä—è–¥–æ–º")
async def handle_find_button(message: types.Message):
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –∏ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n/–Ω–∞–π—Ç–∏ –º–µ–¥–æ—Å–º–æ—Ç—Ä –ú–æ—Å–∫–≤–∞")

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

